import os
from flask import Flask, render_template, request, jsonify
from markupsafe import escape
from datetime import datetime # Added import

# --- IMPORT YOUR CHATBOT FUNCTION --- 
# Assuming ASI-1.py is in the same directory as server.py
# and has a function language_tutor_demo(message: str) -> str
try:
    from ASI_1 import language_tutor_demo # Check filename hyphen vs underscore
except ImportError:
    print("\n*** WARNING: Could not import language_tutor_demo from ASI_1.py. Chatbot functionality will fail. ***\n")
    # Define a dummy function if import fails, so server still runs
    def language_tutor_demo(message: str) -> str:
        return "Error: Chatbot backend logic (ASI_1.py) could not be loaded."
except Exception as e:
    print(f"\n*** WARNING: An unexpected error occurred importing from ASI_1.py: {e} ***\n")
    def language_tutor_demo(message: str) -> str:
        return f"Error: Chatbot backend logic failed to load: {e}"
# -------------------------------------

app = Flask(__name__)

# Configuration
REPORT_FILE = 'personalized_weekly_plan.txt' # The file generated by the orchestrator
REFRESH_INTERVAL = 10 # Auto-refresh interval in seconds

@app.route('/')
def index():
    """Serves the main page displaying the report and chatbot."""
    # Get report data
    report_content = f"Report file '{REPORT_FILE}' not found yet. Please ensure the orchestrator has run and generated it."
    file_exists = os.path.exists(REPORT_FILE)
    last_updated = None # Initialize timestamp

    if file_exists:
        try:
            with open(REPORT_FILE, 'r', encoding='utf-8') as f:
                report_content = f.read()
            # Get modification time and format it
            mod_timestamp = os.path.getmtime(REPORT_FILE)
            last_updated = datetime.fromtimestamp(mod_timestamp).strftime('%Y-%m-%d %H:%M:%S')
        except Exception as e:
            report_content = f"Error reading report file: {escape(str(e))}"
            file_exists = False # Treat error reading as if file doesn't exist for status

    # Render the combined index page
    return render_template(
        'index.html',
        report_content=report_content,
        refresh_interval=REFRESH_INTERVAL,
        file_exists=file_exists,
        last_updated=last_updated # Pass timestamp to template
    )

# --- Route for Chatbot Backend --- 
@app.route('/ask', methods=['POST'])
def ask_chatbot():
    """Handles POST requests from the chat interface."""
    if not request.is_json:
        return jsonify({"error": "Request must be JSON"}), 400
    
    data = request.get_json()
    user_message = data.get('message')

    if not user_message:
         return jsonify({"error": "Missing 'message' field"}), 400

    try:
        # Call the imported chatbot function
        bot_response = language_tutor_demo(user_message)
        return jsonify({"response": bot_response})
    except Exception as e:
        print(f"Error calling language_tutor_demo: {e}") # Log error on server
        # Provide a generic error message to the user
        return jsonify({"error": "Sorry, an internal error occurred while getting the response."}), 500
# -----------------------------

if __name__ == '__main__':
    # Run on port 5000 to avoid conflicts with agents (usually on 80xx)
    print(f"Report viewer and Chatbot available at http://127.0.0.1:5000/")
    app.run(debug=True, port=5000) 